{"ast":null,"code":"var _jsxFileName = \"/home/pateesh/Desktop/Git Projects/Itamar-Hamo-7-12-2021/herolo-weather-task/src/components/MainCityCard/MainCityCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './MainCityCard.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addCityToFavorites } from '../../redux/features/favorites/favoriteSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nexport default function MainCityCards(_ref) {\n  _s();\n\n  let {\n    MainCityName,\n    locationKey\n  } = _ref;\n  // console.log(APIdata);\n  const favorites = useSelector(state => state.favorites.value);\n  const dispatch = useDispatch();\n  const [weatherData, setWeatherData] = useState({\n    text: '',\n    temperatureMetric: ''\n  });\n  const [fiveDayForecast, setForecast] = useState([]);\n  useEffect(() => {\n    //fetch weather data\n    fetch(`http://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${process.env.REACT_APP_API_KEY}&details=true`).then(response => response.json()).then(data => {\n      setWeatherData({\n        text: data[0].WeatherText,\n        temperatureMetric: data[0].Temperature.Metric.Value + ' ' + data[0].Temperature.Metric.Unit\n      });\n      console.log(weatherData);\n    }).catch(() => setWeatherData({\n      text: 'API Limit Reached, try again later.',\n      temperatureMetric: ''\n    })); //fetch five day forecast\n\n    fetch(`http://dataservice.accuweather.com//forecasts/v1/daily/5day/${locationKey}?apikey=${process.env.REACT_APP_API_KEY}&details=true&metric=true`).then(response => response.json()).then(data => {\n      // console.log(data);\n      let newForecast = data.DailyForecasts.map(item => {\n        let date = new Date(item.Date);\n        let weekdayIndex = date.getDay(); //convert the date to the day of the week as a number\n\n        console.log(date);\n        return {\n          day: weekday[weekdayIndex],\n          temperatureMax: item.Temperature.Maximum.Value + ' ' + item.Temperature.Maximum.Unit,\n          temperatureMin: item.Temperature.Minimum.Value + ' ' + item.Temperature.Minimum.Unit\n        };\n      });\n      setForecast(newForecast); // console.log(simplifiedDates);\n\n      console.log(fiveDayForecast);\n    }).catch(() => setForecast([]));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"div\",\n    children: [favorites, /*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profile\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: MainCityName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: weatherData.temperatureMetric ? weatherData.temperatureMetric : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"like\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => dispatch(addCityToFavorites(MainCityName, weatherData.temperatureMetric, weatherData.text)),\n          children: \"Add to Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"forecast-text\",\n      children: weatherData.text ? weatherData.text : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"cityList\",\n      children: fiveDayForecast.map((forecast, index) => {\n        console.log(forecast);\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              children: forecast.day\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Max: \", forecast.temperatureMax]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Min: \", forecast.temperatureMin]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MainCityCards, \"SBJ00OzeWeoZcP5CdM8Ia8nZOmY=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = MainCityCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainCityCards\");","map":{"version":3,"sources":["/home/pateesh/Desktop/Git Projects/Itamar-Hamo-7-12-2021/herolo-weather-task/src/components/MainCityCard/MainCityCard.js"],"names":["React","useEffect","useState","useSelector","useDispatch","addCityToFavorites","weekday","MainCityCards","MainCityName","locationKey","favorites","state","value","dispatch","weatherData","setWeatherData","text","temperatureMetric","fiveDayForecast","setForecast","fetch","process","env","REACT_APP_API_KEY","then","response","json","data","WeatherText","Temperature","Metric","Value","Unit","console","log","catch","newForecast","DailyForecasts","map","item","date","Date","weekdayIndex","getDay","day","temperatureMax","Maximum","temperatureMin","Minimum","forecast","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './MainCityCard.css'\n\nimport { useSelector,useDispatch } from 'react-redux';\nimport { addCityToFavorites } from '../../redux/features/favorites/favoriteSlice'\n\nconst weekday = [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"];\nexport default function MainCityCards({MainCityName, locationKey}){\n    // console.log(APIdata);\n    const favorites = useSelector((state) => state.favorites.value);\n    const dispatch = useDispatch(); \n\n    const [weatherData,setWeatherData] = useState({\n        text: '',\n        temperatureMetric: '',\n    });\n    const [fiveDayForecast, setForecast] = useState([]);\n\n    useEffect(() => {\n        //fetch weather data\n        fetch(`http://dataservice.accuweather.com/currentconditions/v1/${locationKey}?apikey=${process.env.REACT_APP_API_KEY}&details=true`)\n        .then(response => response.json())\n        .then(data => {\n            setWeatherData({\n                text: data[0].WeatherText,\n                temperatureMetric: data[0].Temperature.Metric.Value + ' ' + data[0].Temperature.Metric.Unit\n            });\n            console.log(weatherData);\n        })\n        .catch(() => setWeatherData({\n            text: 'API Limit Reached, try again later.',\n            temperatureMetric: ''\n        }))\n\n        //fetch five day forecast\n        fetch(`http://dataservice.accuweather.com//forecasts/v1/daily/5day/${locationKey}?apikey=${process.env.REACT_APP_API_KEY}&details=true&metric=true`)\n        .then(response => response.json())\n        .then(data => {\n            // console.log(data);\n            let newForecast = data.DailyForecasts.map(item => {\n                let date = new Date(item.Date);\n                let weekdayIndex = date.getDay(); //convert the date to the day of the week as a number\n                console.log(date);\n                return {\n                    day: weekday[weekdayIndex],\n                    temperatureMax: item.Temperature.Maximum.Value+' '+item.Temperature.Maximum.Unit,\n                    temperatureMin: item.Temperature.Minimum.Value+' '+item.Temperature.Minimum.Unit\n                }\n            });\n            \n            setForecast(newForecast);\n            // console.log(simplifiedDates);\n            console.log(fiveDayForecast);\n        })\n        .catch(() => setForecast([]))\n    },[])\n    return (\n        <div className=\"div\">\n            {favorites}\n            <header>\n                <img />\n                <div className=\"profile\">\n                    <h2>{MainCityName}</h2>\n                    <p>{weatherData.temperatureMetric ? weatherData.temperatureMetric : '' }</p>\n                </div>\n                <div className=\"buttons\">\n                    <button>like</button>\n                    <button onClick={() => dispatch(addCityToFavorites(MainCityName, weatherData.temperatureMetric, weatherData.text))}>Add to Favorites</button>\n                </div>\n            </header>\n            <h1 className=\"forecast-text\">{weatherData.text ? weatherData.text : ''}</h1>\n            <ul className=\"cityList\">\n                {fiveDayForecast.map((forecast, index) => {\n                    console.log(forecast);\n                    return (\n                        <li>\n                            <div>\n\n                            <h1>{forecast.day}</h1>\n                            <p>Max: {forecast.temperatureMax}</p>\n                            <p>Min: {forecast.temperatureMin}</p>\n                            </div>\n                        </li>\n                    )\n                })}\n            </ul>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}